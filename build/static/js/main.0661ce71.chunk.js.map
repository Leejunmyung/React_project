{"version":3,"sources":["firebase.js","redux/modules/dict.js","Home.js","Add.js","Input.js","Update.js","App.js","reportWebVitals.js","redux/configStore.js","index.js"],"names":["initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","initialState","list","loadDict","dict_list","type","createDict","dict","deleteDict","dict_index","Box","styled","div","WordBox","ButtonDiv","Home","button","props","my_lists","useSelector","state","history","useHistory","dispatch","useDispatch","map","idx","style","color","word","IconButton","aria-label","size","fontSize","onClick","push","pathname","dict_id","id","getState","a","window","alert","docRef","doc","deleteDoc","_dict_list","findIndex","d","mean","verticalAlign","exam","Container","Word","h2","Form","Label","label","Input","input","Button","Add","text","React","useRef","ref","i","current","value","addDoc","collection","dict_data","goBack","forwardRef","currentValue","useState","setValue","console","log","Text","onChange","e","target","Update","params","useParams","index","wordRef","meanRef","examRef","dic","updateDoc","Title","AddWord","App","useEffect","getDocs","forEach","data","className","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","middlewares","thunk","rootReducer","combineReducers","action","new_dict_list","splice","filter","l","enhancer","applyMiddleware","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0661ce71.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCnJ-x3c-ICsFdeYWDxMNQ1m-3OPivtLug\",\r\n  authDomain: \"react-mydict-19887.firebaseapp.com\",\r\n  projectId: \"react-mydict-19887\",\r\n  storageBucket: \"react-mydict-19887.appspot.com\",\r\n  messagingSenderId: \"780766325954\",\r\n  appId: \"1:780766325954:web:e67917d53ba7233b241f5b\",\r\n  measurementId: \"G-WPEMK69X2Q\"\r\n};\r\n\r\n// Initialize Firebase\r\ninitializeApp(firebaseConfig);\r\n\r\n\r\nexport const db = getFirestore();","import {db} from \"../../firebase\";\r\nimport { doc, collection, getDoc, getDocs,\r\n    addDoc, updateDoc, deleteDoc } from 'firebase/firestore';\r\n\r\n// Actions\r\nconst LOAD = 'dict/LOAD';\r\nconst CREATE = 'dict/CREATE';\r\nconst UPDATE = 'dict/UPDATE';\r\nconst DELETE = 'dict/DELETE';\r\n\r\nconst initialState = {\r\n    list: []\r\n};\r\nexport function loadDict(dict_list){\r\n    return { type: LOAD, dict_list};\r\n}\r\n\r\nexport function createDict(dict) {\r\n    return { type: CREATE, dict };\r\n}\r\n\r\nexport function updateDict(dict,index) {\r\n    return { type: UPDATE, dict, index };\r\n}\r\n\r\nexport function deleteDict(dict_index) {\r\n    return { type: DELETE, dict_index};\r\n}\r\n\r\n//middlewares\r\nexport const loadDictFB = () => {\r\n    return async function (dispatch) {\r\n        const dict_data =await getDocs(collection(db, \"dict\"));\r\n\r\n        let dict_list = [];\r\n\r\n        dict_data.forEach((d) => {\r\n            dict_list.push({id:d.id, ...d.data()});\r\n        })\r\n        dispatch(loadDict(dict_list));\r\n    }\r\n}\r\n\r\nexport const createDictFB = (dict) => {\r\n    return async function (dispatch) {\r\n        const docRef = await addDoc(collection(db, \"dict\"), dict);\r\n        const dict_data = {id: docRef.id, ...dict};\r\n\r\n        dispatch(createDict(dict_data));\r\n    }\r\n}\r\n\r\nexport const updateDictFB = (dic,dict_id) => {\r\n    return async function (dispatch, getState) {\r\n        const docRef = doc(db, 'dict', dict_id);\r\n        await updateDoc(docRef, {...dic});\r\n\r\n        const _dict_list = getState().dict.list;\r\n        const dict_index = _dict_list.findIndex((d) => {\r\n            return d.id === dict_id;\r\n        })\r\n        dispatch(updateDict(dic,dict_index));\r\n    }\r\n}\r\n\r\nexport const deleteDictFB = (dict_id) => {\r\n    return async function (dispatch, getState) {\r\n        if(!dict_id){\r\n            window.alert(\"아이디가 없네요!\");\r\n            return;\r\n        }\r\n        const docRef = doc(db, \"dict\", dict_id);\r\n        await deleteDoc(docRef);\r\n\r\n        const _dict_list = getState().dict.list;\r\n        const dict_index = _dict_list.findIndex((d) => {\r\n            return d.id === dict_id;\r\n        })\r\n        dispatch(deleteDict(dict_index));\r\n    }\r\n}\r\n\r\n\r\n// Reducer\r\nexport default function reducer(state = initialState, action = {}) {\r\n    switch (action.type) {\r\n        case \"dict/LOAD\": {\r\n            return {list: action.dict_list};\r\n        }\r\n        case \"dict/CREATE\": {\r\n            const new_dict_list = [...state.list, action.dict]\r\n            return { list: new_dict_list };\r\n        }\r\n\r\n        case \"dict/UPDATE\": {\r\n            const new_dict_list = state.list\r\n            new_dict_list.splice(action.index,1,action.dict)\r\n\r\n            return {list: new_dict_list};\r\n        }\r\n\r\n        case \"dict/DELETE\": {\r\n            const new_dict_list = state.list.filter((l, idx) => {\r\n                return action.dict_index !== idx;\r\n            })\r\n            return {list: new_dict_list};\r\n        }\r\n        default: return state;\r\n    }\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { deleteDict, deleteDictFB } from \"./redux/modules/dict\"\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\r\nimport PublicIcon from '@material-ui/icons/Public';\r\nimport StarsIcon from '@material-ui/icons/Stars';\r\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\r\n\r\n\r\n\r\nconst Home = (props) => {\r\n    const my_lists = useSelector((state) => state.dict.list);\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <>\r\n            {my_lists.map((list, idx) => {\r\n                return (\r\n                    <Box key={idx}>\r\n                        <WordBox>\r\n                            <h1 style={{color:\"white\"}}><PublicIcon/> {list.word}</h1>\r\n                            <ButtonDiv>\r\n                                <IconButton aria-label=\"delete\" size=\"small\" color =\"primary\">\r\n                                <BorderColorIcon fontSize=\"medium\" onClick={() => {\r\n                                    history.push({\r\n                                        pathname: \"/update/\" + idx,\r\n                                    });\r\n                                }}/>\r\n                                    </IconButton>\r\n                                    <IconButton aria-label=\"delete\" size=\"small\" color=\"secondary\">\r\n                                    <DeleteForeverIcon fontSize=\"medium\" onClick={() => {\r\n                                    dispatch(deleteDictFB(list.id));\r\n                                }}/>\r\n                                    </IconButton>\r\n                            </ButtonDiv>\r\n                        </WordBox>\r\n                        <h3 style={{color:\"white\"}}><StarsIcon fontSize=\"small\"/>  {list.mean}</h3>\r\n                        <p style={{ color: \"lightskyblue\", fontSize:\"17px\",verticalAlign:\"middle\" }}><Brightness4Icon fontSize=\"small\"/>      {list.exam}</p>\r\n                    </Box>\r\n                );\r\n            })}\r\n\r\n        </>\r\n\r\n\r\n    );\r\n};\r\nconst Box = styled.div`\r\n    position: relative;\r\n    padding: 20px;\r\n    width: 400px;\r\n    height: 170px;\r\n    border-radius: 10px;\r\n    border: 2px solid white;\r\n`\r\nconst WordBox = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n`\r\nconst ButtonDiv = styled.div`\r\n    position: absolute;\r\n    top: 15px;\r\n    right: 10px;\r\n`\r\nconst Button = styled.button`\r\n    margin-right: 5px;\r\n`\r\nexport default Home;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {createDict, createDictFB} from \"./redux/modules/dict\"\r\n\r\nconst Add = (props) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const text = React.useRef([]);\r\n    const addDictList = () => {\r\n        \r\n        dispatch(createDictFB({word:text.current[0].value, \r\n                mean:text.current[1].value, exam:text.current[2].value}));\r\n        history.goBack();\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <Word>단어 추가하기</Word>\r\n            <Form>\r\n                <Label>단어</Label>\r\n                <Input ref={(i) => text.current.push(i)}></Input>\r\n            </Form>\r\n            <Form>\r\n                <Label>뜻</Label>\r\n                <Input ref={(i) => text.current.push(i)}></Input>\r\n\r\n            </Form>\r\n            <Form>\r\n                <Label>예시</Label>\r\n                <Input ref={(i) => text.current.push(i)}></Input>\r\n            </Form>\r\n            <Button onClick={addDictList}>저장하기</Button>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst Container = styled.div`\r\n    border: 3px solid lightgrey;\r\n    width: 400px;\r\n    height: 40vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 20px;\r\n`\r\nconst Word = styled.h2`\r\n    text-align: center;\r\n    margin-bottom: 20px;\r\n    color: white;\r\n`\r\nconst Form = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom: 30px;\r\n`\r\nconst Label = styled.label`\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n    color: white;\r\n\r\n`\r\nconst Input = styled.input`\r\n    outline: none;\r\n    border: none;\r\n    border-bottom: 1px solid lightpink;\r\n`\r\nconst Button = styled.button`\r\n    font-size: 20px;\r\n    height: 40px;\r\n    width: 120px;\r\n    border-radius: 3px;\r\n    /* border: none; */\r\n    color: white;\r\n    background-color: lightpink;\r\n    align-self: center;\r\n`\r\nexport default Add;","import React, { forwardRef, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Input = forwardRef((props, ref) => {\r\n    const currentValue = props.value;\r\n    const [value, setValue] = useState(currentValue? currentValue:\"\")\r\n    const inputChange = (e) => setValue(e.target.value);\r\n    console.log(ref)\r\n    return (\r\n\r\n        <Text ref={ref} value={value} onChange={inputChange}></Text>\r\n        \r\n    );\r\n});\r\n\r\nconst Text = styled.input`\r\n    outline: none;\r\n    border: none;\r\n    border-bottom: 1px solid lightpink;\r\n`\r\nexport default Input;","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport {updateDict ,updateDictFB} from \"./redux/modules/dict\"\r\nimport { useLocation } from \"react-router-dom\";\r\nimport Input from \"./Input\";\r\n\r\nconst Update = (props) => {\r\n    const params = useParams();\r\n    const history = useHistory();\r\n    const dict_index = params.index;\r\n    const dispatch = useDispatch();\r\n    \r\n    const wordRef = React.useRef(null);\r\n    const meanRef = React.useRef(null);\r\n    const examRef = React.useRef(null);\r\n\r\n    const dict_list = useSelector((state) => state.dict.list);\r\n    const updateWord = () => {\r\n        dispatch(updateDictFB({word:wordRef.current.value, mean:meanRef.current.value, exam:examRef.current.value },dict_list[dict_index].id));\r\n        history.push(\"/\");\r\n    }\r\n    \r\n\r\n    return (\r\n        <Container>\r\n            <Word>단어 수정하기</Word>\r\n            <Form>\r\n                <Label>단어</Label>\r\n                <Input ref={wordRef} value={dict_list[dict_index].word}></Input>\r\n            </Form>\r\n            <Form>\r\n                <Label>뜻</Label>\r\n                <Input ref={meanRef} value={dict_list[dict_index].mean}></Input>\r\n\r\n            </Form>\r\n            <Form>\r\n                <Label>예시</Label>\r\n                <Input ref={examRef} value={dict_list[dict_index].exam}></Input>\r\n            </Form>\r\n            <Button onClick={updateWord}>수정하기</Button>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst Container = styled.div`\r\n    border: 3px solid lightgrey;\r\n    width: 400px;\r\n    height: 40vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 20px;\r\n`\r\nconst Word = styled.h2`\r\n    text-align: center;\r\n    margin-bottom: 20px;\r\n    color: white;\r\n`\r\nconst Form = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom: 30px;\r\n`\r\n\r\nconst Label = styled.label`\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n    color:white;\r\n`\r\nconst Button = styled.button`\r\n    font-size: 20px;\r\n    height: 40px;\r\n    width: 120px;\r\n    border-radius: 3px;\r\n    color: white;\r\n    background-color: lightpink;\r\n    align-self: center;\r\n`\r\nexport default Update;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Home from './Home';\nimport Add from './Add';\nimport {useHistory} from \"react-router-dom\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport Update from './Update';\nimport { loadDictFB } from './redux/modules/dict';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport IconButton from '@material-ui/core/IconButton';\n\n\nfunction App() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const my_lists = useSelector((state) => state.dict.list);\n\n  React.useEffect(async() => {\n    dispatch(loadDictFB());\n  }, [my_lists]);\n\n  return (\n    <div className='App'>\n      <Title>\n        <h1 onClick={() => {\n          history.push(\"/\")\n        }}>\n          My Dictionary\n        </h1>\n      </Title>\n      <Container>\n        <Route path='/' exact>\n          <Home />\n        </Route>\n        <Route path='/add' exact>\n          <Add />\n        </Route>\n        <Route path='/update/:index' exact>\n          <Update />\n        </Route>\n      </Container>\n      <AddWord>\n      <IconButton aria-label=\"delete\" size=\"20px\" color=\"secondary\">\n      <AddCircleOutlineIcon fontSize=\"large\" onClick={() => {\n          history.push(\"/add\")\n        }}/>\n      </IconButton>\n        \n      </AddWord>\n    </div>\n\n  );\n}\nconst Title = styled.div`\n  background-color: #363333;\n  color:white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-bottom: 3px solid white;\n`\nconst Container = styled.div`\n  margin: 60px 60px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  align-items: center;\n  justify-content: center;\n`\nconst AddWord = styled.div`\n  position: absolute;\n  bottom: 10px;\n  right: 10px;\n  background-color: white;\n  width: 60px;\n  height: 60px;\n  border-radius: 35px;\n  border: 1px solid red;\n  text-align: center;\n\n`\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {createStore, combineReducers, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport dict from './modules/dict';\r\n\r\n\r\nconst middlewares = [thunk];\r\nconst rootReducer = combineReducers({dict});\r\nconst enhancer = applyMiddleware(...middlewares);\r\n\r\nconst store = createStore(rootReducer, enhancer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/configStore';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}